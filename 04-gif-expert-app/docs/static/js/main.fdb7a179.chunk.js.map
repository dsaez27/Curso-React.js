{"version":3,"sources":["Components/AddCategory.js","Helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAiBjD,OACC,mCACC,sBAAMC,SAXa,SAACC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IACrBR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAMvB,SACC,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAnBsB,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,e,+BCLZG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEhBC,EAFgB,iDAEgCC,UAAWH,GAF3C,+DAGHI,MAAMF,GAHH,cAGhBG,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVd,kBAcfM,GAde,4CAAH,sDCDPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACfd,mBAAS,CAClCqB,KAAM,GACNa,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAqBzC,OAfGC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAK,SAAAC,GAEEH,EAAS,CACvBf,KAAMkB,EACYL,SAAS,SAI1B,CAACpB,IAIAqB,EDlB2BK,CAAa1B,GAAjCa,EAF0B,EAEhCN,KAAca,EAFkB,EAElBA,QAEtB,OACC,qCACC,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,sBAEZ,qBAAKA,UAAU,YAAf,SAGEH,EAAOJ,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAEKA,GADCA,EAAIC,aEfHgB,EAAe,WAAO,IAAD,EACGzC,mBAAS,CAAC,gBADb,mBAC1B0C,EAD0B,KACd3C,EADc,KAOjC,OACC,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEE2C,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAECA,SAAUA,GADLA,Y,MCbZ6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.fdb7a179.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (inputValue.trim().length > 0) {\r\n            setCategories((cats) => [inputValue, ...cats]);\r\n            setInputValue('');\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tvalue={inputValue}\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\n\r\n\r\nexport const getGifs = async (category) => {\r\n\t\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=s9DN1cA9IOkV4XmBGql9HPHoATL6rB28`;\r\n\tconst resp = await fetch(url);\r\n\tconst { data } = await resp.json();\r\n\r\n\tconst gifs = data.map(img => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t}\r\n\t})\r\n\r\n\treturn gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../Hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n\r\n\t\t\t{loading && <p className='animate__animated animate__flash'>Cargando</p> }\r\n\t\t\t\r\n\t\t\t<div className='card-grid'>\r\n\t\t\t\t\r\n\t\t\t\t{\r\n\t\t\t\t\timages.map(img => (\r\n\t\t\t\t\t\t<GifGridItem\r\n\t\t\t\t\t\t\tkey={img.id}\r\n\t\t\t\t\t\t\t{...img} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../Helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                    setState({\r\n\t\t\t\t\t\tdata: imgs,\r\n                        loading: false,\r\n                    });\r\n            })\r\n        \r\n    }, [category])\r\n\r\n\r\n\r\n\treturn state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport {AddCategory} from './Components/AddCategory';\r\nimport {GifGrid} from './Components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\tconst [categories, setCategories] = useState(['Linkin park']);\r\n\r\n\t//? const handleAdd = () => setCategories(cats => [...cats, 'HunterXHunter']);\r\n\r\n\t//* const categories = ['One punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t<AddCategory setCategories={setCategories} />\r\n\t\t\t<hr />\r\n\r\n\t\t\t<ol>\r\n\t\t\t\t{\r\n\t\t\t\t\tcategories.map((category) => (\r\n\t\t\t\t\t\t<GifGrid\r\n\t\t\t\t\t\t\tkey={category}\r\n\t\t\t\t\t\t\tcategory={category}\t\t\t\t\t\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</ol>\r\n\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}